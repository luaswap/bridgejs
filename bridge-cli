#!/usr/bin/env node

const commander = require('commander')
const BridgeJS = require('./bridge')
const pjson = require('./package.json')
const { prompt, Separator } = require('inquirer')
const fs = require('fs')
const path = require('path')
const os = require('os')
const ethers = require('ethers')
const dotenv = require('dotenv')

let configPath = path.resolve(process.cwd(), '.env')

let profileDir = path.resolve(require('os').homedir(), '.bridgecli')
if (!fs.existsSync(profileDir)){
    fs.mkdirSync(profileDir)
}

if (fs.existsSync(path.resolve(profileDir, 'config'))) {
    configPath = path.resolve(path.resolve(profileDir, 'config'))
}

let bridgejs = new BridgeJS()

function collect(value, previous) {
    return previous.concat([value]);
}   

function collectTerms(value, previous) {
    return previous.concat([parseInt(value)]);
}   

function parseTradeFee(value, previous) {
    return parseFloat(value) 
}       
            
commander
    .version(pjson.version)
    .allowUnknownOption()
    .option('-C --config <path>', 'set config path. defaults to $HOME/.bridgejs')
    .description('TomoChain CLI')
    .action(async (params) => {
        configPath = params.config || configPath
        dotenv.config({ path: configPath })

        if ((process.argv.indexOf('--help') < 0) && (process.argv.indexOf('init') < 0)
            && (process.argv.indexOf('info') < 0)) {
            if (!process.env.ENDPOINT || !process.env.USER_PKEY) {
                console.log('Run `bridge-cli init` to setup environment')
                process.exit(1)
            }
        }

        bridgejs = await BridgeJS.setProvider(
            process.env.ENDPOINT,
            process.env.USER_PKEY
        )
    })

if (process.argv.indexOf('--help') < 0 && process.argv.indexOf('-h') < 0) {
    commander.parseAsync(process.argv).then(() => {
        run()
    })
} else {
    run()
}

function run() {
    commander
        .command('init')
        .description('setup/init environment')
        .option('-p, --password <password>', 'password', '')
        .option('-k, --keystore <keystore>', 'path to keystore file')
        .action(async (params) => {
            const questions = [{
                type : 'input',
                name : 'endpoint',
                message : 'Enter TomoBridge endpoint...',
                default: 'https://bridge.devnet.tomochain.com'
            }]
            if (!params.keystore) {
                questions.push({
                    type : 'password',
                    name : 'userPKey',
                    message : 'Enter user private key (default: generate random pkey)...'
                })
            }
            prompt(questions).then(async answers => {
                try {
                    configPath = path.resolve(path.resolve(profileDir, 'config'))
                    let bridgejsPath = path.resolve(configPath)
                    let address = ''

                    if (params.keystore) {
                        let keydata = fs.readFileSync(params.keystore);
                        let json = JSON.parse(keydata);
                        let wallet = await ethers.Wallet.fromEncryptedJson(JSON.stringify(json), params.password)
                        answers.userPKey = wallet.privateKey
                        address = wallet.address
                    }

                    if (!answers.userPKey) {
                        let randomWallet = ethers.Wallet.createRandom()
                        answers.userPKey = randomWallet.privateKey
                        address = randomWallet.address
                    } else {
                        let wallet = new ethers.Wallet(answers.userPKey)
                        address = wallet.address
                    }
                    fs.writeFile(bridgejsPath, `ENDPOINT=${answers.endpoint}\nUSER_PKEY=${answers.userPKey}\nUSER_ADDR=${address}\n`, function (err) {
                        if (err) throw err;
                        console.log('Address:', address);
                        console.log('Saved!');
                    })
                } catch(e) {
                    console.log(e)
                }
            })
        })

    commander
        .command('info')
        .description('show environment')
        .action(async () => {
            let info = await BridgeJS.networkInformation(process.env.ENDPOINT)
            info.configPath = configPath
            info.ENDPOINT = process.env.ENDPOINT
            info.USER_ADDR = process.env.USER_ADDR
            info.USER_PKEY = '******'
            console.log(info)
        })

    commander
        .command('wrap-get-address')
        .description('get address for wrapping')
        .requiredOption('-t --token <token>', 'token symbol')
        .option('-a --address <address>', 'user address')
        .action(async (params) => {
            await bridgejs.wrapGetAddress({
                tokenSymbol: params.token,
                userAddress: params.address
            })
            .then(data => {
                console.log(data)
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander
        .command('wrap-watch')
        .description('watch wrap')
        .requiredOption('-t --token <token>', 'token symbol')
        .action(async (params) => {
            await bridgejs.wrapWatch({
                tokenSymbol: params.token
            })
            .then(ev => {
                ev.on('message', (message) => {
                    console.log('%s', JSON.stringify(message))
                })
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander
        .command('unwrap-watch')
        .description('watch wrap')
        .requiredOption('-t --token <token>', 'token symbol')
        .action(async (params) => {
            await bridgejs.unwrapWatch({
                tokenSymbol: params.token
            })
            .then(ev => {
                ev.on('message', (message) => {
                    console.log('%s', JSON.stringify(message))
                })
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander
        .command('unwrap')
        .description('unwrap token')
        .requiredOption('-t --token <token>', 'token symbol')
        .requiredOption('-a --amount <amount>', 'amount')
        .requiredOption('-d --dest <dest>', 'destination address')
        .action(async (params) => {
            await bridgejs.unwrap({
                tokenSymbol: params.token,
                amount: params.amount,
                dest: params.dest
            })
            .then(data => {
                console.log(data)
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander
        .command('get-wrap-txs')
        .description('get wrap transactions')
        .requiredOption('-p --page <page>', 'page number')
        .requiredOption('-l --limit <limit>', 'limit number')
        .action(async (params) => {
            await bridgejs.getWrapTransactions({
                page: params.page,
                limit: params.limit
            })
            .then(data => {
                console.log(data)
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander
        .command('get-unwrap-txs')
        .description('get unwrap transactions')
        .requiredOption('-p --page <page>', 'page number')
        .requiredOption('-l --limit <limit>', 'limit number')
        .action(async (params) => {
            await bridgejs.getUnwrapTransactions({
                page: params.page,
                limit: params.limit
            })
            .then(data => {
                console.log(data)
            }).catch(e => console.log(e.message ? e.message : e))
        })

    commander.parse(process.argv)
}
